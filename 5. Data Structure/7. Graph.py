### Graph (그래프)

# 아주 중요한 자료구조 중 하나로, 정점(Node 혹은 Vertex)과 그 정점 사이를 잇는 간선(Edge)들로 이루어진 자료구조
# 정점을 이어주는 간선이 방향성이 있냐 없냐에 따라 유향 그래프(Directed Graph), 무향 그래프(Undirected Graph)
# 등으로 나눌 수 있음
# 간선이 특정 수치를 가질 수 있는데, 이럴 경우 이를 가중치(Weighted Value)라고 함
# 응용 방식이 무궁무진하고, 구현하는 방식도 여러 가지가 있고, 여기서는 그 중 몇가지를 작성

### 예시 코드

# 이중 리스트를 이용한 구현 (1) (인접 행렬)

# 모든 정점에 대한 순서쌍의 간선을 이중 리스트에 하나하나 전부 표현함
# graph[i][j]은 정점 i에서 정점 j가 직접 연결되어 있는지 아닌지를 나타냄
# graph[i][j] == 0 이면 정점 i와 정점 j가 직접 연결되어 있지 않고, 1이면 직접 연결되어 있음
# 메모리 소비가 심하긴 하지만 구현이 직관적이고, 데이터 값을 0이나 1이 아닌 간선의 가중치로 설정하면
# 간선 가중치 변경이 용이한 등 장점이 있음
# 플로이드-워셜 알고리즘 등 이 구현법이 더 적용하기 편한 알고리즘이 존재

graph = [
    [0, 1, 1, 1, 0],
    [1, 0, 0, 1, 1],
    [1, 0, 0, 1, 0],
    [1, 1, 1, 0, 1],
    [0, 1, 0, 1, 0]
]

# 이중 리스트를 이용한 구현 (2) (인접 리스트)

# 리스트의 인덱스를 출발하는 정점 번호로 보고, 그 원소를 연결되는 다른 정점으로 표현
# 연결되는 정점 뿐만 아니라 가중치 정보도 같이 넣어줄 수 있으나, 이 경우는 연결되는 정점과 그 가중치를
# 리스트나 다른 형태의 자료구조로 묶어서 넣어야 되므로 3중 리스트로 구현됨
# 가독성이 비교적 좋지 않으나, 메모리 면에서 이득을 봄

# 그래프 리스트의 인덱스는 출발하는 정점 번호, 이중 리스트 내 리스트의 첫번째 원소는 연결되는 정점 번호,
# 두번째 원소는 가중치를 나타냄
# [첫번째 정점, 두번째 정점, 가중치]와 같이 구현하는 것도 가능

graph = [
    [[1, 2], [2, 3]]
    [[0, 7]]
    [[0, 1], [1, 4]]
]

# 딕셔너리를 이용한 구현

# 위와 거의 동일한 구현이나, 리스트 대신 딕셔너리를 이용함
# 입출력이 리스트를 이용한 구현만큼 자유롭고 편하진 않지만, 해시 테이블 기반 자료구조인 딕셔너리 특성상
# 단순 참조 등에서는 속도가 상당히 빠름
# 특히 정점을 숫자가 아닌 임의의 문자열 등으로 입력받을 경우 유용함

graph = {
    'A' : [['B', 1], ['C', 3]],
    'B' : [['C', 2]],
    'C' : [['A', 3], ['B', 4]]
}
