### Fermat's Little Theorem (페르마의 소정리)

# 정수 a, 소수 p가 있고 a가 p의 배수가 아닐 시, a^p를 p로 나눈 나머지는 a임이 알려져 있음
# 혹은, a^(p-1)를 p로 나눈 나머지가 1이라는 식으로도 표현 가능
# 이 정리의 역은 일반적으로 성립하지 않음

# 모듈로 곱셈의 역원을 양의 정수로 돌려놓을 때 이 정리가 사용됨

### 예제
'''
자연수 n, k가 주어졌을 때, 이항 계수 nCk를 1000000007로 나눈 나머지를 구하시오.
'''

import sys

# 계산 과정에서 매우 큰 지수 계산이 필요하므로, 분할 정복을 이용한 지수 계산을 구현
def pow(x, n):
    if n == 1:
        return x % 1000000007
    else:
        d = pow(x, n//2)
        if n % 2 == 0:
            return d**2 % 1000000007
        else:
            return d**2 * x % 1000000007

n, k = map(int, sys.stdin.readline().split())

# 매우 큰 팩토리얼 계산이 필요하므로 DP를 응용하여 계산
fac = [0 for _ in range(n+1)]
fac[0] = 1

for i in range(1, n+1):
    fac[i] = (fac[i-1] * i) % 1000000007

# nCk % 1000000007 = (n!)/(k!)*(n-k)! % 1000000007 = (n!)*((k!)*(n-k)!)^-1 % 1000000007
# 페르마의 소정리에 의해, (n!)*((k!)*(n-k)!)^-1 % 1000000007 = (n!)*((k!)*(n-k)!)^(1000000007 - 2) % 1000000007
# = (n!)*((k!)*(n-k)!)^(1000000005) % 1000000007
print(fac[n] * pow(fac[k]*fac[n-k], 1000000005) % 1000000007) 