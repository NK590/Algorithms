### Bitwise Operators (비트 연산자)

# Python을 비롯한 대부분의 프로그래밍 언어들은 직접 비트 연산을 할 수 있는 기능을 제공함
# 비트마스킹 등 알고리즘 테크닉에 이용되거나, 혹은 그 자체로도 쓰이는 경우가 종종 있음

# Python에서 사용되는 비트 연산자는 다음과 같음

# & : 비트 단위로 두 수의 AND 연산 (두 비트가 모드 1일 때 1 반환, 나머지는 0 반환)
# | : 비트 단위로 두 수의 OR 연산 (두 비트 중 하나 이상이 1일 때 1 반환, 나머지는 0 반환)
# ^ : 비트 단위로 두 수의 XOR 연산 (두 비트가 같을 때 0 반환, 나머지는 1 반환)
# ~ : 비트 단위로 주어진 수에 NOT 연산 (1일 때 0, 0일 때 1 반환)
# << : 비트 단위로 왼쪽으로 밀기 연산 (연산자 왼쪽에 밀 수, 오른쪽에 밀 횟수)
# >> : 비트 단위로 오른쪽으로 밀기 연산 (연산자 왼쪽에 밀 수, 오른쪽에 밀 횟수)

### 예제

print(13 & 10)
print(13 | 10)
print(13 ^ 10)
print(~13)
print(13 << 1)
print(13 >> 1)

# 정의에서 유도되는 비트 연산의 성질

# 1. x ^ 0 == x
# 2. x ^ x == 0
# 3. (x ^ y) ^ z == x ^ (y ^ z)
# 4. x << y == x * 2**y, 특히 1 << x == 2**x
# 5. x >> 1 == x // 2

# 특히, XOR 연산에 대해서는 다음과 같은 성질이 있음

# 1. 주어진 수열 S_1, S_2, S_3, ... , S_n-1, S_n 에 대해 V_k를 S_1 ^ S_2 ^ S_3 ^ ... ^ S_k라고 정의할 때,
# S_i부터 S_j까지의 수를 전부 XOR한 값은 V_i ^ V_j-1 과 같음

# 2. 특히, 주어진 수열이 1, 2, 3, ... , n 인 자연수 수열일 경우는 다음이 성립함
#    1) n % 4 == 0 일 때, V_n == n
#    2) n % 4 == 1 일 때, V_n == 1
#    3) n % 4 == 2 일 때, V_n == n + 1
#    4) n % 4 == 3 일 때, V_n == 0

